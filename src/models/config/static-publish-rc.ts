/*
 * Copyright Fastly, Inc.
 * Licensed under the MIT license. See LICENSE file for details.
 */

export type StaticPublishRcBase = {
  // Publish ID. This is a unique string "prefix" that identifies your assets in
  // storage. This is generated by init-app and is usually not to be changed.
  publishId: string;

  // Default collection name.
  defaultCollectionName: string,

  // A directory that holds the working files built by compute-js-static-publish,
  // relative to the Compute application.
  // These files should not be committed to source control.
  staticPublisherWorkingDir: string,
};

// New KV Store config
export type StaticPublishPartialKvStoreNew = {
  storageMode: 'kv-store',
  kvStore: {
    kvStoreName: string,
  },
};

// Legacy KV Store config
export type StaticPublishPartialKvStoreLegacy = {
  storageMode?: undefined;
  kvStoreName: string,
};

// Union
export type StaticPublishPartialKvStore =
  | StaticPublishPartialKvStoreNew
  | StaticPublishPartialKvStoreLegacy
;

// KV Store config
export type StaticPublishKvStore =
  StaticPublishPartialKvStore & StaticPublishRcBase;

export function isKvStoreConfigRc(rc: unknown): rc is StaticPublishKvStore {
  if (typeof rc !== 'object' || rc == null) {
    return false;
  }

  // Legacy
  if (!('storageMode' in rc) || rc.storageMode === undefined) {
    if ('kvStoreName' in rc && typeof rc.kvStoreName === 'string') {
      return true;
    }
  }

  if ('storageMode' in rc && rc.storageMode === 'kv-store') {
    if ('kvStore' in rc && typeof rc.kvStore === 'object' && rc.kvStore != null) {
      if ('kvStoreName' in rc.kvStore && typeof rc.kvStore.kvStoreName === 'string') {
        return true;
      }
    }
  }

  return false;
}

// S3 Storage config
export type StaticPublishPartialS3Storage = {
  storageMode: 's3',
  s3: {
    region: string,
    bucket: string,
    endpoint?: string,
    fastlyBackendName?: string,
  },
};

export type StaticPublishS3Storage =
  StaticPublishPartialS3Storage & StaticPublishRcBase;

export function isS3StorageConfigRc(rc: unknown): rc is StaticPublishS3Storage {
  if (typeof rc !== 'object' || rc == null) {
    return false;
  }

  if ('storageMode' in rc && rc.storageMode === 's3') {
    if ('s3' in rc && typeof rc.s3 === 'object' && rc.s3 != null) {
      if (
        'region' in rc.s3 && typeof rc.s3.region === 'string' &&
        'bucket' in rc.s3 && typeof rc.s3.bucket === 'string' && (
          !('endpoint' in rc.s3) ||
          rc.s3.endpoint === undefined ||
          typeof rc.s3.endpoint === 'string'
        ) && (
          !('fastlyBackendName' in rc.s3) ||
          rc.s3.fastlyBackendName === undefined ||
          typeof rc.s3.fastlyBackendName === 'string'
        )
      ) {
        return true;
      }
    }
  }

  return false;
}

export type StaticPublishPartialStorage =
  | StaticPublishPartialKvStore
  | StaticPublishPartialS3Storage
;

export type StaticPublishRc =
  | StaticPublishKvStore
  | StaticPublishS3Storage
;
